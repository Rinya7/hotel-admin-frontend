// src/stores/superadmin
// Pinia-—Å—Ç–æ—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–∞: —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–µ–ª—ñ–≤ (–∞–¥–º—ñ–Ω—ñ–≤),
// –ª–æ–∫–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫/—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ –¥—ñ—ó: –±–ª–æ–∫/—Ä–æ–∑–±–ª–æ–∫/–≤–∏–¥–∞–ª–µ–Ω–Ω—è.

import { defineStore } from "pinia";
import http from "@/api/http"; // üëà –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–≤—ñ–π axios-—ñ–Ω—Å—Ç–∞–Ω—Å
import type {
  PublicAdminUser,
  SuperAdminUsersResponse,
  HotelSortKey,
  SortDir,
} from "@/types/hotel";
import type {
  CreateAdminRequest,
  CreateAdminResponse,
  UpdateHotelAdminRequest,
  UpdateHotelAdminResponse,
} from "@/types/dto";

export interface HotelsState {
  loading: boolean;
  error: string | null;
  raw: PublicAdminUser[]; // –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
  query: string; // —Ä—è–¥–æ–∫ –ø–æ—à—É–∫—É
  sortKey: HotelSortKey;
  sortDir: SortDir;
}

function normalize(text: string): string {
  return text.toLowerCase();
}

function getSortValue(
  h: PublicAdminUser,
  key: HotelSortKey
): string | number | boolean {
  // –ê–∫—Å–µ—Å–æ—Ä–∏ –ø—ñ–¥ –∫–æ–∂–µ–Ω –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –∫–ª—é—á
  switch (key) {
    case "hotel_name":
      return (h.hotel_name ?? "").toLowerCase();
    case "address":
      return (h.address ?? "").toLowerCase();
    case "username":
      return h.username.toLowerCase();
    case "createdAt":
      // ISO-—Ä—è–¥–æ–∫ –º–æ–∂–Ω–∞ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ; –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ ‚Äî –≤ —á–∏—Å–ª–æ time
      return Date.parse(h.createdAt) || 0;
    case "editorsCount":
      return h.editorsCount;
    case "isBlocked":
      return h.isBlocked;
  }
}
function compareValues(
  a: string | number | boolean,
  b: string | number | boolean,
  dir: SortDir
): number {
  const mul = dir === "asc" ? 1 : -1;

  // –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
  if (typeof a === "string" && typeof b === "string") {
    return a.localeCompare(b) * mul;
  }
  if (typeof a === "number" && typeof b === "number") {
    return (a - b) * mul;
  }
  if (typeof a === "boolean" && typeof b === "boolean") {
    return (Number(a) - Number(b)) * mul;
  }
  // –Ø–∫—â–æ —Ç–∏–ø–∏ —Ä—ñ–∑–Ω—ñ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —Ä—è–¥–∫–∞ —è–∫ fallback (—Ä—ñ–¥–∫—ñ—Å–Ω–∏–π –∫–µ–π—Å)
  return String(a).localeCompare(String(b)) * mul;
}

export const useSuperHotelsStore = defineStore("super-hotels", {
  state: (): HotelsState => ({
    loading: false,
    error: null,
    raw: [],
    query: "",
    sortKey: "hotel_name",
    sortDir: "asc",
  }),
  getters: {
    filtered(state): PublicAdminUser[] {
      if (!state.query.trim()) return state.raw;
      const q = normalize(state.query);
      return state.raw.filter((r) => {
        const fields: Array<string> = [
          r.hotel_name ?? "",
          r.address ?? "",
          r.username,
          r.full_name ?? "",
          r.email ?? "",
          r.phone ?? "",
        ];
        return fields.some((f) => normalize(f).includes(q));
      });
    },
    sorted(): PublicAdminUser[] {
      const key = this.sortKey;
      const dir = this.sortDir;
      const list = [...this.filtered];
      return list.sort((a, b) =>
        compareValues(getSortValue(a, key), getSortValue(b, key), dir)
      );
    },
    /** –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Ç–µ–ª—ñ–≤ (–∞–¥–º—ñ–Ω—ñ–≤-–≤–ª–∞—Å–Ω–∏–∫—ñ–≤) */
    totalHotels(state): number {
      return state.raw.length;
    },

    /** –°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤ –ø–æ –≤—Å—ñ—Ö –≥–æ—Ç–µ–ª—è—Ö */
    totalEditors(state): number {
      return state.raw.reduce((acc, h) => acc + (h.editorsCount ?? 0), 0);
    },

    /** –°–∫—ñ–ª—å–∫–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –≥–æ—Ç–µ–ª—ñ–≤ */
    blockedHotels(state): number {
      return state.raw.filter((h) => h.isBlocked).length;
    },

    /** –°–∫—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö (–Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö) */
    activeHotels(): number {
      return this.totalHotels - this.blockedHotels;
    },

    /** –°–µ—Ä–µ–¥–Ω—î —á–∏—Å–ª–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤ –Ω–∞ –≥–æ—Ç–µ–ª—å (–æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ 1 –∑–Ω–∞–∫—É) */
    avgEditorsPerHotel(): number {
      if (this.totalHotels === 0) return 0;
      const avg = this.totalEditors / this.totalHotels;
      return Math.round(avg * 10) / 10;
    },

    /** –û—Å—Ç–∞–Ω–Ω—ñ N –≥–æ—Ç–µ–ª—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è */
    latestHotels:
      (state) =>
      (limit = 5): PublicAdminUser[] => {
        return [...state.raw]
          .sort((a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt))
          .slice(0, limit);
      },
  },
  actions: {
    setQuery(q: string): void {
      this.query = q;
    },
    setSort(key: HotelSortKey): void {
      if (this.sortKey === key) {
        this.sortDir = this.sortDir === "asc" ? "desc" : "asc";
      } else {
        this.sortKey = key;
        this.sortDir = "asc";
      }
    },

    /** –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞ (–≥–æ—Ç–µ–ª—å). –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–æ–º. */
    async createHotelAdmin(payload: CreateAdminRequest): Promise<void> {
      // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ ‚Äî –ø–∞—Ä–æ–ª—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
      if (payload.password !== payload.confirmPassword) {
        throw new Error("–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è");
      }
      // üëá —á—ñ—Ç–∫–æ –∫–∞–∂–µ–º–æ: –æ—á—ñ–∫—É—î–º–æ CreateAdminResponse
      await http.post<CreateAdminResponse>("/auth/create-admin", payload);

      // –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ‚Äî –æ–Ω–æ–≤–∏–º–æ —Å–ø–∏—Å–æ–∫, —â–æ–± —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/—Ç–∞–±–ª–∏—Ü—è –≤—ñ–¥—Ä–∞–∑—É –ø—ñ–¥—Ö–æ–ø–∏–ª–∏—Å—è
      await this.fetchAll();
    },

    /** –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –≥–æ—Ç–µ–ª—é (–∑–∞ username), —Ç—ñ–ª—å–∫–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω */
    async updateHotel(
      username: string,
      patch: UpdateHotelAdminRequest
    ): Promise<void> {
      // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ñ—Ä–æ–Ω—Ç-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–æ–¥–∏–Ω (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ)
      const isHourOrNull = (v: unknown): v is number | null =>
        v === null ||
        (Number.isInteger(v) && (v as number) >= 0 && (v as number) <= 23);

      if (
        typeof patch.checkInHour !== "undefined" &&
        !isHourOrNull(patch.checkInHour)
      ) {
        throw new Error("checkInHour –º–∞—î –±—É—Ç–∏ 0..23 –∞–±–æ null");
      }
      if (
        typeof patch.checkOutHour !== "undefined" &&
        !isHourOrNull(patch.checkOutHour)
      ) {
        throw new Error("checkOutHour –º–∞—î –±—É—Ç–∏ 0..23 –∞–±–æ null");
      }

      const res = await http.put<UpdateHotelAdminResponse>(
        `/auth/admin/${encodeURIComponent(username)}`,
        patch
      );

      // –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
      const updated = res.data.admin;
      const idx = this.raw.findIndex((u) => u.username === username);
      if (idx >= 0) {
        const old = this.raw[idx];
        this.raw[idx] = {
          ...old,
          hotel_name: updated.hotel_name,
          address: updated.address,
          full_name: updated.full_name,
          phone: updated.phone,
          email: updated.email,
          logo_url: updated.logo_url,
          checkInHour: updated.checkInHour,
          checkOutHour: updated.checkOutHour,
          updatedAt: updated.updatedAt,
        };
      }
    },

    /** –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ–≤-¬´–≤–ª–∞—Å–Ω–∏–∫—ñ–≤¬ª (–≥–æ—Ç–µ–ª—ñ) –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–∞ */
    async fetchAll(): Promise<void> {
      this.loading = true;
      this.error = null;
      try {
        // –ë–µ–∫–µ–Ω–¥: GET /auth/users ‚Äî –¥–ª—è superadmin –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ PublicAdminUser
        const res = await http.get<SuperAdminUsersResponse>("/auth/users");
        this.raw = res.data;
      } catch (e) {
        this.error = e instanceof Error ? e.message : "Unknown error";
      } finally {
        this.loading = false;
      }
    },

    /** –í–∑—è—Ç–∏ –≥–æ—Ç–µ–ª—å –∑ –∫–µ—à—É –∑–∞ id */
    byId(id: number): PublicAdminUser | undefined {
      return this.raw.find((x) => x.id === id);
    },

    /** –ë–ª–æ–∫—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ —ñ –≤—Å—ñ—Ö –π–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤ */
    async block(username: string): Promise<void> {
      await http.put(`/auth/block/${encodeURIComponent(username)}`);
      // –æ–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
      const target = this.raw.find((u) => u.username === username);
      if (target) {
        target.isBlocked = true;
        // —Ç–∞–∫–æ–∂ –ø–æ–º—ñ—Ç–∏–º–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤ (–æ–ø—Ü—ñ–π–Ω–æ)
        target.editors.forEach((e) => (e.isBlocked = true));
      }
    },

    /** –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ —ñ –≤—Å—ñ—Ö –π–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ–≤ */
    async unblock(username: string): Promise<void> {
      await http.put(`/auth/unblock/${encodeURIComponent(username)}`);
      const target = this.raw.find((u) => u.username === username);
      if (target) {
        target.isBlocked = false;
        target.editors.forEach((e) => (e.isBlocked = false));
      }
    },

    /** –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±—É–¥—å-–∫–æ–≥–æ) */
    async removeUser(username: string): Promise<void> {
      await http.delete(`/auth/delete/${encodeURIComponent(username)}`);
      this.raw = this.raw.filter((u) => u.username !== username);
    },
  },
});
